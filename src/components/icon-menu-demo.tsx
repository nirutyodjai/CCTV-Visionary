'use client';

import React, { useState } from 'react';
import { IconMenuSidebar } from './sidebar/icon-menu-sidebar';
import { DevicesToolbar } from './sidebar/devices-toolbar';
import { DeviceCategories } from './sidebar/device-categories';
import { ArchitectureToolbar } from './sidebar/architecture-toolbar';
import { AiAssistant } from './sidebar/ai-assistant';
import { DiagnosticsPanel } from './sidebar/diagnostics-panel';
import { ProjectNavigator } from './sidebar/project-navigator';
import { ProjectManager } from './sidebar/project-manager';
import { BillOfMaterials } from './sidebar/bill-of-materials';
import { PropertiesPanel } from './sidebar/properties-panel';
import { PlannerCanvas } from './canvas/planner-canvas';
import { AppSettings } from './sidebar/app-settings';
import { NetworkSettings } from './sidebar/network-settings';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import type { Floor, AnyDevice, ArchitecturalElement } from '@/lib/types';

export function IconMenuDemo() {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isCollapsed, setIsCollapsed] = useState(false);

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const defaultFloor: Floor = {
    id: 'demo-floor-1',
    name: '‡∏ä‡∏±‡πâ‡∏ô 1',
    devices: [
      {
        id: 'demo-camera-1',
        type: 'cctv-dome',
        label: '‡∏Å‡∏•‡πâ‡∏≠‡∏á Dome 1',
        x: 0.3,
        y: 0.3,
        rotation: 0,
        resolution: '4K',
        fov: 90,
        range: 50
      } as AnyDevice,
      {
        id: 'demo-nvr-1',
        type: 'nvr',
        label: 'NVR ‡∏´‡∏•‡∏±‡∏Å',
        x: 0.7,
        y: 0.7,
        rotation: 0,
        ports: 16,
        channels: 16
      } as AnyDevice
    ],
    connections: [],
    architecturalElements: []
  };

  const defaultCablingMode = { enabled: false, fromDeviceId: null };

  // Default data for network settings
  const defaultVlans = [
    { id: '1', name: 'CCTV Network', color: 'hsl(221, 83%, 53%)' },
    { id: '2', name: 'Management', color: 'hsl(142, 71%, 45%)' }
  ];

  const defaultSubnets = [
    { id: '1', cidr: '192.168.1.0/24' },
    { id: '2', cidr: '10.0.0.0/8' }
  ];

  const handleDeviceClick = (device: AnyDevice) => {
    console.log('Device clicked:', device);
  };

  const handleArchElementClick = (element: ArchitecturalElement) => {
    console.log('Architectural element clicked:', element);
  };

  const handleCanvasClick = () => {
    console.log('Canvas clicked');
  };

  const handleDeviceMove = (deviceId: string, pos: { x: number; y: number }) => {
    console.log('Device moved:', deviceId, pos);
  };

  const handleDeviceUpdate = (device: AnyDevice) => {
    console.log('Device updated:', device);
  };

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return (
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  üìä ‡πÅ‡∏îÿ¥‡∏ö‡∏≠‡∏£‡πå‡∏î CCTV Planner
                  <Badge variant="secondary">v2.0</Badge>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ */}
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="p-4 rounded-lg bg-blue-50 dark:bg-blue-950 border">
                      <h3 className="font-semibold text-blue-900 dark:text-blue-100 mb-2">
                        üì∑ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå CCTV
                      </h3>
                      <p className="text-2xl font-bold text-blue-600">24</p>
                      <p className="text-sm text-blue-700 dark:text-blue-300">‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                    </div>
                    
                    <div className="p-4 rounded-lg bg-green-50 dark:bg-green-950 border">
                      <h3 className="font-semibold text-green-900 dark:text-green-100 mb-2">
                        üåê ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
                      </h3>
                      <p className="text-2xl font-bold text-green-600">98%</p>
                      <p className="text-sm text-green-700 dark:text-green-300">‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</p>
                    </div>
                    
                    <div className="p-4 rounded-lg bg-purple-50 dark:bg-purple-950 border">
                      <h3 className="font-semibold text-purple-900 dark:text-purple-100 mb-2">
                        ‚ö° ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
                      </h3>
                      <p className="text-2xl font-bold text-purple-600">95%</p>
                      <p className="text-sm text-purple-700 dark:text-purple-300">‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</p>
                    </div>
                  </div>

                  {/* ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
                  <Card className="bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-800 dark:to-blue-900">
                    <CardHeader>
                      <CardTitle className="text-lg">üîÑ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö CCTV</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-3">
                        <div className="text-center p-3 bg-blue-100 dark:bg-blue-900 rounded-lg cursor-pointer hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors" onClick={() => setActiveTab('project')}>
                          <div className="text-2xl mb-2">üìã</div>
                          <div className="font-medium text-sm">1. ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô</div>
                          <div className="text-xs text-gray-600 dark:text-gray-400">‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå ‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå</div>
                        </div>
                        <div className="text-center p-3 bg-green-100 dark:bg-green-900 rounded-lg cursor-pointer hover:bg-green-200 dark:hover:bg-green-800 transition-colors" onClick={() => setActiveTab('devices')}>
                          <div className="text-2xl mb-2">üèóÔ∏è</div>
                          <div className="font-medium text-sm">2. ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö</div>
                          <div className="text-xs text-gray-600 dark:text-gray-400">‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏° ‚Ä¢ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</div>
                        </div>
                        <div className="text-center p-3 bg-purple-100 dark:bg-purple-900 rounded-lg cursor-pointer hover:bg-purple-200 dark:hover:bg-purple-800 transition-colors" onClick={() => setActiveTab('ai')}>
                          <div className="text-2xl mb-2">ü§ñ</div>
                          <div className="font-medium text-sm">3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</div>
                          <div className="text-xs text-gray-600 dark:text-gray-400">AI ‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢</div>
                        </div>
                        <div className="text-center p-3 bg-orange-100 dark:bg-orange-900 rounded-lg cursor-pointer hover:bg-orange-200 dark:hover:bg-orange-800 transition-colors" onClick={() => setActiveTab('analytics')}>
                          <div className="text-2xl mb-2">‚úÖ</div>
                          <div className="font-medium text-sm">4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</div>
                          <div className="text-xs text-gray-600 dark:text-gray-400">3D ‚Ä¢ ‡∏à‡∏≥‡∏•‡∏≠‡∏á</div>
                        </div>
                        <div className="text-center p-3 bg-red-100 dark:bg-red-900 rounded-lg cursor-pointer hover:bg-red-200 dark:hover:bg-red-800 transition-colors" onClick={() => setActiveTab('export')}>
                          <div className="text-2xl mb-2">üì§</div>
                          <div className="font-medium text-sm">5. ‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö</div>
                          <div className="text-xs text-gray-600 dark:text-gray-400">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‚Ä¢ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å</div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </CardContent>
            </Card>
            
            <PlannerCanvas
              floor={defaultFloor}
              cablingMode={defaultCablingMode}
              onDeviceClick={handleDeviceClick}
              onArchElementClick={handleArchElementClick}
              onCanvasClick={handleCanvasClick}
              onDeviceMove={handleDeviceMove}
              onDeviceUpdate={handleDeviceUpdate}
            />
          </div>
        );
        
      case 'devices':
        return (
          <div className="space-y-4">
            <DevicesToolbar onSelectDevice={(device) => console.log('Selected device:', device)} />
            <DeviceCategories onSelectDevice={(device) => console.log('Selected device from categories:', device)} />
          </div>
        );
        
      case 'architecture':
        return <ArchitectureToolbar 
          selectedTool={null} 
          onSelectTool={(tool) => console.log('Selected tool:', tool)} 
        />;
        
      case 'ai':
        return <AiAssistant 
          onAnalyze={() => console.log('Analyzing...')}
          onSuggest={() => console.log('Suggesting...')}
          onFindCablePaths={() => console.log('Finding cable paths...')}
          isAnalyzing={false}
          isSuggesting={false}
          isFindingPaths={false}
        />;
        
      case 'diagnostics':
        return <DiagnosticsPanel 
          diagnostics={[]}
          onRunDiagnostics={() => console.log('Running diagnostics...')}
          isLoading={false}
        />;
        
      case 'project':
        return (
          <div className="space-y-4">
            <ProjectNavigator 
              buildings={[{
                id: 'demo-building',
                name: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
                floors: [defaultFloor]
              }]}
              activeBuildingId="demo-building"
              activeFloorId="demo-floor-1"
              onFloorSelect={(buildingId, floorId) => console.log('Floor selected:', buildingId, floorId)}
              onAddFloor={() => console.log('Adding floor...')}
              onUpdateBuildingName={(buildingId, name) => console.log('Update building name:', buildingId, name)}
            />
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£</CardTitle>
              </CardHeader>
              <CardContent>
                <Button 
                  className="w-full" 
                  onClick={() => console.log('Opening project manager...')}
                >
                  ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£
                </Button>
              </CardContent>
            </Card>
          </div>
        );
        
      case 'report':
        return <BillOfMaterials 
          project={{
            id: 'demo-project',
            projectName: '‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
            buildings: [{
              id: 'demo-building',
              name: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
              floors: [defaultFloor]
            }]
          }}
        />;
        
      case 'settings':
        return (
          <AppSettings 
            onImportDemo={() => console.log('Importing demo...')}
            onExportSettings={() => console.log('Exporting settings...')}
            onImportSettings={() => console.log('Importing settings...')}
            onResetSettings={() => console.log('Resetting settings...')}
          />
        );
        
      case 'files':
        return (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üìÅ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ ‡πÅ‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ</p>
              <div className="mt-4 space-y-2">
                <Button variant="outline" className="w-full justify-start">
                  üìÑ ‡πÅ‡∏ö‡∏ö‡πÅ‡∏õ‡∏•‡∏ô‡∏ä‡∏±‡πâ‡∏ô 1.dwg
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  üì∑ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏£‡∏ß‡∏à.jpg
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£.pdf
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  üìã ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î.docx
                </Button>
              </div>
            </CardContent>
          </Card>
        );
        
      case 'network':
        return (
          <NetworkSettings 
            vlans={defaultVlans}
            subnets={defaultSubnets}
            onAddVlan={(vlan) => console.log('Adding VLAN:', vlan)}
            onAddSubnet={(subnet) => console.log('Adding subnet:', subnet)}
            onDeleteVlan={(id) => console.log('Deleting VLAN:', id)}
            onDeleteSubnet={(id) => console.log('Deleting subnet:', id)}
            onTestConnection={() => Promise.resolve(true)}
          />
        );
        
      case 'analytics':
        return (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö CCTV</p>
              <div className="mt-4 space-y-2">
                <div className="p-3 bg-blue-50 dark:bg-blue-950 rounded-lg">
                  <div className="text-sm font-medium">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>
                  <div className="text-2xl font-bold text-blue-600">85%</div>
                </div>
                <div className="p-3 bg-green-50 dark:bg-green-950 rounded-lg">
                  <div className="text-sm font-medium">‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö</div>
                  <div className="text-2xl font-bold text-green-600">92%</div>
                </div>
                <div className="p-3 bg-purple-50 dark:bg-purple-950 rounded-lg">
                  <div className="text-sm font-medium">‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°</div>
                  <div className="text-2xl font-bold text-purple-600">88%</div>
                </div>
              </div>
            </CardContent>
          </Card>
        );
        
      case 'security':
        return (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üîí ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏£‡∏∞‡∏ö‡∏ö</p>
              <div className="mt-4 space-y-2">
                <div className="flex items-center justify-between p-3 bg-green-50 dark:bg-green-950 rounded-lg">
                  <span className="text-sm">‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</span>
                  <Badge variant="secondary" className="bg-green-100 text-green-800">‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</Badge>
                </div>
                <div className="flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg">
                  <span className="text-sm">‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
                  <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á</Badge>
                </div>
                <div className="flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-950 rounded-lg">
                  <span className="text-sm">‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>
                  <Badge variant="secondary" className="bg-blue-100 text-blue-800">‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        );
        
      case 'export':
        return (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p>‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô PDF, Excel, CAD ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ</p>
              <div className="mt-4 space-y-2">
                <Button className="w-full" variant="outline">
                  üìÑ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å PDF Report
                </Button>
                <Button className="w-full" variant="outline">
                  üìä ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å Excel BOM
                </Button>
                <Button className="w-full" variant="outline">
                  üìê ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å AutoCAD DWG
                </Button>
                <Button className="w-full" variant="outline">
                  üñºÔ∏è ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û PNG/JPG
                </Button>
                <Button className="w-full" variant="outline">
                  üíæ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ JSON
                </Button>
              </div>
            </CardContent>
          </Card>
        );
        
      case 'connect':
        return (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üîó ‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p>‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</p>
              <div className="mt-4 space-y-2">
                <Button className="w-full" variant="outline">
                  üìß ‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                </Button>
                <Button className="w-full" variant="outline">
                  üîó ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ä‡∏£‡πå
                </Button>
                <Button className="w-full" variant="outline">
                  üë• ‡πÄ‡∏ä‡∏¥‡∏ç‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô
                </Button>
                <Button className="w-full" variant="outline">
                  üíº ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </Button>
                <Button className="w-full" variant="outline">
                  üåê ‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
                </Button>
              </div>
            </CardContent>
          </Card>
        );
        
      case 'layers':
        return (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                üóÇÔ∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô</p>
              <div className="mt-4 space-y-2">
                <div className="flex items-center justify-between p-2 border rounded">
                  <span className="text-sm">‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏Å‡∏•‡πâ‡∏≠‡∏á CCTV</span>
                  <input type="checkbox" defaultChecked className="rounded" />
                </div>
                <div className="flex items-center justify-between p-2 border rounded">
                  <span className="text-sm">‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢</span>
                  <input type="checkbox" defaultChecked className="rounded" />
                </div>
                <div className="flex items-center justify-between p-2 border rounded">
                  <span className="text-sm">‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°</span>
                  <input type="checkbox" defaultChecked className="rounded" />
                </div>
                <div className="flex items-center justify-between p-2 border rounded">
                  <span className="text-sm">‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≤‡∏¢</span>
                  <input type="checkbox" className="rounded" />
                </div>
              </div>
            </CardContent>
          </Card>
        );
        
      case 'help':
        return (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                ‚ùì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p>‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô</p>
              <div className="mt-4 space-y-2">
                <Button variant="outline" className="w-full justify-start">
                  üìñ ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  üé• ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  üí¨ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  üÜï ‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                </Button>
              </div>
            </CardContent>
          </Card>
        );
        
      default:
        return (
          <Card>
            <CardHeader>
              <CardTitle>‡πÄ‡∏°‡∏ô‡∏π: {activeTab}</CardTitle>
            </CardHeader>
            <CardContent>
              <p>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π {activeTab}</p>
            </CardContent>
          </Card>
        );
    }
  };

  return (
    <div className="flex h-screen bg-background">
      <IconMenuSidebar
        activeTab={activeTab}
        onTabChange={setActiveTab}
        isCollapsed={isCollapsed}
        onToggleCollapse={() => setIsCollapsed(!isCollapsed)}
      />
      
      <div className="flex-1 overflow-auto">
        <div className="h-full">
          {renderContent()}
        </div>
      </div>
    </div>
  );
}
